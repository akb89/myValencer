{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to myValencer's manual! myValencer is a web application to query valence patterns in FrameNet. myValencer is free and opensource. Help us improve it by reporting bugs or requesting features on Github or by contacting us at contact at valencer.io. Warning This manual is intendend for myValencer's users. It may contain errors or approximations regarding FrameNet. Please always refer to the FrameNet book . myValencer currently supports the following functionalities: Annotations : displays all annotated sentences exemplifying the input valence pattern. Frames : displays all frames which contain at least one lexical unit which arguments are realized in the specified input valence pattern. Lexical units : displays all lexical units which arguments are realized in the specified input valence pattern. Cluster : displays the cluster of frames matching the input valence pattern, with their respective (frame) relations. For more details regarding the output of the application, check out the Output section . What is a valence pattern ? A valence pattern refers to the range of combinatorial possibilities of valences for each lexical unit, where valences are the syntactic realizations of frame elements, represented as triplets of frame element (FE), phrase type (PT) and grammatical function (GF). The following sentence provides an example of FrameNet annotation for the valence pattern Fluid.NP.Ext Goal.PP.Dep Source.PP.Dep where the predicate spill.v evokes the Fluidic_motion frame: Here, the Fluid FE is realized as the subject Ext of a noun phrase NP , and the Goal and Source FEs are realized as objects Dep of prepositional phrases PP . You can find a summary of FrameNet's PT and GF below . For a detailed account, refer to the FrameNet book . For a detailed account of Frame Elements, you can browse the Frame Index on the FrameNet website. Query HowTo myValencer is designed to take as input combinations of FE.PT.GF triplets, such as: Fluid.NP.Ext Goal.PP.Dep Source.PP.Dep The above query will return all annotation sets containing at least the three distinct Frame Elements Fluid , Goal and Source in their specified syntactic realizations. Valences must be separated by a whitespace and triplets FE.PT.GF in a single valence are separated by a dot. Combinations of valences are orderless , so the above query is equivalent to: Goal.PP.Dep Fluid.NP.Ext Source.PP.Dep Similarly, triplets inside a given valence are also orderless , so that Goal.PP.Dep is equivalent to PP.Goal.Dep or to Dep.PP.Goal . Queries are also case-insensitive , so the above queries are equivalent to: fluid.np.ext goal.pp.dep source.pp.dep Finally, the query system is flexible and accepts combinations of one, two or three elements per valence, such as: Goal Fluid.Ext Source.PP The above query will search for annotation sets containing a Goal FE in any possible syntactic realization (PT.GF), a Fluid FE realized as an external argument in any kind of phrase type, and a Source FE realized in a prepositional phrase with any kind of grammatical function. Use cases Below are some possible use case for the myValencer application: Accessing hidden FrameNet data Analyzing the semantic scope of syntactic constructions myValencer can be used to analyze the 'semantic scope' of a given syntactic construction by querying for frames or lexical units matching the corresponding (syntactic) valence pattern. For example, querying for the lexical units matching the prepositional indirect object construction NP.Ext NP.Obj NP.Dep will return 349 unique lexical units found in 207 unique frames. Paraphrasing myValencer can be used to search for paraphrasing candidates by querying lexical units matching a given valence pattern, as FrameNet is characterized by relatively narrow-scope frames and frame elements. For examples, querying for the lexical units matching the vp Fluid.NP.Ext Goal.PP.Dep Source.PP.Dep corresponding to sentences such as Some of the wine spilled from the bottle to the floor , will return lexical units such as drip.v , leak.v , splash.v or trickle.v . Concordancing myValencer can be used to extend the capabilities of traditional concordancers by enabling searching for complex combinations of semantic and syntactic patterns, not bounded by specific lexical items. Querying for annotations returns a list of annotated sentences matching a given valence pattern, with the corresponding labels as well as all the relevant information pertaining to the lexical unit and its frame Options withExtraCoreFEs strictVUmatching Output Annotations Frames Lexical Units Cluster PT GF overview PT labels GF labels Label Name Details Example Ext External Argument Obj Object Dep Dependent Head Head noun modified by attributive adjective Gen Genitive determiner Appos Appositive Mapping to UD and PENN","title":"Home"},{"location":"#welcome-to-myvalencers-manual","text":"myValencer is a web application to query valence patterns in FrameNet. myValencer is free and opensource. Help us improve it by reporting bugs or requesting features on Github or by contacting us at contact at valencer.io. Warning This manual is intendend for myValencer's users. It may contain errors or approximations regarding FrameNet. Please always refer to the FrameNet book . myValencer currently supports the following functionalities: Annotations : displays all annotated sentences exemplifying the input valence pattern. Frames : displays all frames which contain at least one lexical unit which arguments are realized in the specified input valence pattern. Lexical units : displays all lexical units which arguments are realized in the specified input valence pattern. Cluster : displays the cluster of frames matching the input valence pattern, with their respective (frame) relations. For more details regarding the output of the application, check out the Output section .","title":"Welcome to myValencer's manual!"},{"location":"#what-is-a-valence-pattern","text":"A valence pattern refers to the range of combinatorial possibilities of valences for each lexical unit, where valences are the syntactic realizations of frame elements, represented as triplets of frame element (FE), phrase type (PT) and grammatical function (GF). The following sentence provides an example of FrameNet annotation for the valence pattern Fluid.NP.Ext Goal.PP.Dep Source.PP.Dep where the predicate spill.v evokes the Fluidic_motion frame: Here, the Fluid FE is realized as the subject Ext of a noun phrase NP , and the Goal and Source FEs are realized as objects Dep of prepositional phrases PP . You can find a summary of FrameNet's PT and GF below . For a detailed account, refer to the FrameNet book . For a detailed account of Frame Elements, you can browse the Frame Index on the FrameNet website.","title":"What is a valence pattern?"},{"location":"#query-howto","text":"myValencer is designed to take as input combinations of FE.PT.GF triplets, such as: Fluid.NP.Ext Goal.PP.Dep Source.PP.Dep The above query will return all annotation sets containing at least the three distinct Frame Elements Fluid , Goal and Source in their specified syntactic realizations. Valences must be separated by a whitespace and triplets FE.PT.GF in a single valence are separated by a dot. Combinations of valences are orderless , so the above query is equivalent to: Goal.PP.Dep Fluid.NP.Ext Source.PP.Dep Similarly, triplets inside a given valence are also orderless , so that Goal.PP.Dep is equivalent to PP.Goal.Dep or to Dep.PP.Goal . Queries are also case-insensitive , so the above queries are equivalent to: fluid.np.ext goal.pp.dep source.pp.dep Finally, the query system is flexible and accepts combinations of one, two or three elements per valence, such as: Goal Fluid.Ext Source.PP The above query will search for annotation sets containing a Goal FE in any possible syntactic realization (PT.GF), a Fluid FE realized as an external argument in any kind of phrase type, and a Source FE realized in a prepositional phrase with any kind of grammatical function.","title":"Query HowTo"},{"location":"#use-cases","text":"Below are some possible use case for the myValencer application:","title":"Use cases"},{"location":"#accessing-hidden-framenet-data","text":"","title":"Accessing hidden FrameNet data"},{"location":"#analyzing-the-semantic-scope-of-syntactic-constructions","text":"myValencer can be used to analyze the 'semantic scope' of a given syntactic construction by querying for frames or lexical units matching the corresponding (syntactic) valence pattern. For example, querying for the lexical units matching the prepositional indirect object construction NP.Ext NP.Obj NP.Dep will return 349 unique lexical units found in 207 unique frames.","title":"Analyzing the semantic scope of syntactic constructions"},{"location":"#paraphrasing","text":"myValencer can be used to search for paraphrasing candidates by querying lexical units matching a given valence pattern, as FrameNet is characterized by relatively narrow-scope frames and frame elements. For examples, querying for the lexical units matching the vp Fluid.NP.Ext Goal.PP.Dep Source.PP.Dep corresponding to sentences such as Some of the wine spilled from the bottle to the floor , will return lexical units such as drip.v , leak.v , splash.v or trickle.v .","title":"Paraphrasing"},{"location":"#concordancing","text":"myValencer can be used to extend the capabilities of traditional concordancers by enabling searching for complex combinations of semantic and syntactic patterns, not bounded by specific lexical items. Querying for annotations returns a list of annotated sentences matching a given valence pattern, with the corresponding labels as well as all the relevant information pertaining to the lexical unit and its frame","title":"Concordancing"},{"location":"#options","text":"","title":"Options"},{"location":"#withextracorefes","text":"","title":"withExtraCoreFEs"},{"location":"#strictvumatching","text":"","title":"strictVUmatching"},{"location":"#output","text":"","title":"Output"},{"location":"#annotations","text":"","title":"Annotations"},{"location":"#frames","text":"","title":"Frames"},{"location":"#lexical-units","text":"","title":"Lexical Units"},{"location":"#cluster","text":"","title":"Cluster"},{"location":"#pt-gf-overview","text":"","title":"PT GF overview"},{"location":"#pt-labels","text":"","title":"PT labels"},{"location":"#gf-labels","text":"Label Name Details Example Ext External Argument Obj Object Dep Dependent Head Head noun modified by attributive adjective Gen Genitive determiner Appos Appositive","title":"GF labels"},{"location":"#mapping-to-ud-and-penn","text":"","title":"Mapping to UD and PENN"}]}